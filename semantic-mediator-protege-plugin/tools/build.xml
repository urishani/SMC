<?xml version = "1.0" encoding = "utf-8"?>
<project name = "SMC repository project" default = "install" basedir = "..">    

   <!-- 
        To run this build file set the environment variable
        PROTEGE_HOME to point to a protege distribution and type ant
        install or jar.
     -->

   <property environment="env"/>
   <property name = "protege.home"      location="${env.PROTEGE_HOME}"/>
   <property file = "${protege.home}/build.properties"/>

   <property file="local.properties"/>

   <property file="etc/version.properties"/>

   <!-- 
        This setting defines the name of the plugin.
        This may be the only setting that the developer needs to
        change.
     -->
   <property name = "plugin"          value = "com.ibm.haifa.smc.repository"/>

   
   <!-- 
        these can be overridden in the local.properties for different
        distributions 
     -->
   <property name = "protege.osgi"      location="${protege.home}/org.eclipse.osgi.jar"/>


   <!-- 
        these properties probably don't need changing
        -->
   <property name = "src"               location = "./src/main/java"/>  
   <property name = "build"             location = "./build"/>
   <property name = "bundle.dir"        location = "${build}"/>
   <property name = "classes"           location = "${build}/classes"/>
   <property name = "pom.target.classes" location = "./target/classes"/>
   <property name = "genlib"            location = "${build}/lib"/>
   <property name = "manifest"          location = "${build}/manifest.mf"/>
   <property name = "plugins"           location = "./plugins"/>

   <property name = "protege.common"    location="${protege.home}/bundles"/>
   <property name = "protege.plugins"   location="${protege.home}/plugins"/>


   <target name = "init">
     <tstamp>
       <format property="build.time" pattern="yyyy_MM_dd_hhmm"/>
     </tstamp>
     <property name="bundle.version"
               value="${major.version}.${minor.version}.${micro.version}.${build.time}"/>
     <mkdir dir = "${build}"/>
     <mkdir dir = "${classes}"/>
     <mkdir dir = "${genlib}"/>
   </target>  

   <!-- ============================================================= -->
   <!--             Configuring the Compile Classpath                 -->
   <!-- ============================================================= -->


    <target name="checkProtegeLibsAndReport" depends="checkProtegeLibs"
            unless="libs.found">
      <echo message="Missing protege libraries.  You need to set "/>
      <echo message="the PROTEGE_HOME environment variable to a"/>
      <echo message="protege installation directory where the"/>
      <echo message="appropriate plugins have been installed."/>
      <echo message="Alternatively set the jar libs in local.properties (protege.lib=...)"/>
      <echo message="Use the -v option to ant to see what jars are missing."/>
      <fail message = "missing protege libraries"/>
    </target>

   <!-- 
        The following target only needs to be modified if the user
        needs to change the classpath.  It is preconfigured to use
        the common protege 4 jars, the lib directory and the
        libraries that have been uncovered in buildlibs. 
     -->
   <target name = "checkProtegeLibs" depends="init">
     <echo message="**********************************************************"/>
	 <echo message="Using Protege Home = ${protege.home}"/>
     <echo message="Using Java Version = ${ant.java.version}" />
     <echo message="**********************************************************"/>
     <condition property="libs.found">
       <and>
         <available file="${protege.osgi}" type="file"/>
	     <available file="${equinox.common}" type = "file"/>
	     <available file="${equinox.registry}" type = "file"/>
	     <available file="${owl.editor.jar}" type = "file"/>
         <available file="${owl.lib}" type="file"/>
       </and>
     </condition>
     <path id = "project.classpath">    
       <pathelement location="${protege.osgi}"/>
       <pathelement location="${protege.lib}"/>
       <pathelement location="${equinox.common}"/>
       <pathelement location="${equinox.registry}"/>
       <pathelement location="${owl.editor.jar}"/>
       <pathelement location="${owl.lib}"/>
       <fileset dir="${genlib}"/>
     </path>
   </target>


   <!-- 
        The following target only needs to be modified if the
        developer needs to obtain some jar files that are contained in
        the Protege bundles.  The contents of these jar files are
        found when Protege 4 runs but may be needed in order to
        compile the plugin. 
     -->
   <target name = "buildlibs" depends="checkProtegeLibsAndReport">
       <unjar dest="${build}"
              src="${common.lib}">
           <patternset>
               <include name = "**/log4j.jar"/>
               <include name = "**/looks.jar"/>
           </patternset>
       </unjar>
   </target>



   <!-- 
        Here is the copy.resources target.  It may need modification
        to copy the right resources into the classes directory.  By
        default it already copies non-java files found in the source
        directory, the libraries needed by the project and the
        viewconfig and the plugin.xml.  This will be sufficient in
        many cases. 
     -->
   <target name="copy.resources" depends="build.manifest">
     <copy todir="${classes}">
       <fileset dir="${src}">
         <include name="**/*"/>
         <exclude name="**/*.java"/>
         <exclude name="**/MANIFEST.MF"/>
         <exclude name="**/manifest.mf"/>
       </fileset>
     </copy>
   	<copy todir="${classes}"><fileset dir="${pom.target.classes}"/></copy>
    <copy todir="${genlib}-ibm"> <fileset dir="lib-ibm"/> </copy>
    <copy todir="${build}">
       <fileset dir="." includes="*.xml"><exclude name="build.xml"/></fileset>
       <fileset dir="./src/main/resources"/>
     </copy>
   	 <!-- the manifest doesn't belong here but this is good for IDE's -->
     <copy todir="${build}/META-INF"> <fileset dir="./META-INF"/> </copy>
   	 <delete file="./classes/bundle.version"/>
   	 <mkdir dir="./classes"/>
	 <touch file="./classes/bundle.version"/>
	 <echo message="${bundle.version}" file="./classes/bundle.version"/>
     <copy todir="${classes}"> <fileset dir="./classes"/> </copy>
   </target>


   <!-- 
        It is less likely that the developer will want to make changes
        below this line 
        -->
   <!-- ============================================================= -->

   <target name="add.source" depends="init">
       <zip destfile="${classes}/${plugin}src.zip">
           <fileset dir="${src}"/>
       </zip>
   </target>

   <target name = "compile" depends = "buildlibs, checkProtegeLibsAndReport">
     <javac srcdir = "${src}"
            destdir = "${classes}" 
            debug="on"
            includeAntRuntime="false">
       <classpath refid = "project.classpath"/>  
     </javac>
   </target>

	<property name="target" value="..\semantic-mediator-protege-plugin"/>

   <target name="build.manifest" depends="init">
     <manifest file="META-INF/MANIFEST.MF" 
               mode = "update">
        <attribute name="Built-By" value = "${user.name}"/>
        <attribute name="Bundle-Version" value="${bundle.version}"/>
     </manifest>
    <manifest file="${target}/META-INF/MANIFEST.MF" 
              mode = "update">
       <attribute name="Built-By" value = "${user.name}"/>
       <attribute name="Bundle-Version" value="${bundle.version}"/>
    </manifest>
   </target>


   <target name = "jar" depends = "copy.resources">
   	 <mkdir dir="${plugins}"/>
     <jar jarfile = "${plugins}/${plugin}.jar"
          basedir = "${build}" 
          manifest = "${build}/META-INF/MANIFEST.MF"/>
   </target>

   <target name = "install" depends = "jar">
     <!-- flush cache -->
     <delete dir = "${protege.home}/configuration/org.eclipse.core.runtime"/>
     <delete dir = "${protege.home}/configuration/org.eclipse.osgi"/>
     <copy file="${plugins}/${plugin}.jar" 
           todir = "${protege.plugins}"
           overwrite = "true"/>
   </target>
	
   <target name = "junit"/>

   <target name = "clean">
     <delete dir = "${build}"/>
   </target>


   <target name = "usage">
     <echo message = "To run this script set the PROTEGE_HOME environment"/>
     <echo message = "variable and use one of the following targets"/>
     <echo message = "jar - builds the jar (bundle) file for this project"/>
     <echo message = "install - installs  the bundle into the Protege distribution"/>
     <echo message = "copy.resources - copies resources into the classes directory"/>
     <echo message = "    this can  be useful for ide developers - see the wiki"/>
   </target>


   <!-- 
        Standard properties that should not require changing
        -->
   <property name="equinox.common" 
             location="${protege.common}/org.eclipse.equinox.common.jar"/>
   <property name="equinox.registry"
             location="${protege.common}/org.eclipse.equinox.registry.jar"/>
   <property name="protege.lib" 
             location="${protege.common}/org.protege.editor.core.application.jar"/>
   <property name="common.lib"
             location="${protege.common}/org.protege.common.jar"/>

   <property name="owl.lib"
             location="${protege.plugins}/org.semanticweb.owl.owlapi.jar"/>

   <property name="owl.editor.jar"
	     location="${protege.plugins}/org.protege.editor.owl.jar"/>




   <!-- ===================================================================  -->
   <!-- Distribution Support - Optional                                      -->
   <!-- ===================================================================  -->

   <property name="svn.root" value="http://smi-protege.stanford.edu/repos/protege/protege4/plugins/org.coode.dlquery/trunk"/>


   <property name="update.properties.file" value="${svn.root}/etc/update.properties"/>
   <property name="readme.file"            value="${svn.root}/etc/dlquery-readme.html"/>

   <property name="download"               value="http://smi-protege.stanford.edu/protege4/plugins/4.1r/${plugin}.jar"/>

   <target name = "dist" depends="jar">
       <echo file="./etc/update.properties" append="false">
id=${plugin}
version=${bundle.version}
download=${download}
name=DL Query Plugin
readme=${readme.file}
license=http://www.gnu.org/licenses/lgpl.html
author=Matthew Horridge for the CO-ODE project
       </echo>
       <echo message="The build file should ensure that"/>
       <echo message="1. The bundle version and id is correct."/>
       <echo message="Check the following things"/>
       <echo message="1. The main repository uses "/>
       <echo message="      ${update.properties.file}"/>
       <echo message="   to find this update"/>
       <echo message="2. The update.properties can be found at "/>
       <echo message="      ${update.properties.file}"/>
       <echo message="   Usually this is ensured by committing your changed files."/>
       <echo message="3. The readme file for this update can be found at"/>
       <echo message="      ${readme.file}"/>
       <echo message="   Usually this is ensured by committing your changed files."/>
       <echo message="4. The download for this update can be found at"/>
       <echo message="      ${download}"/>
   </target>



</project>
